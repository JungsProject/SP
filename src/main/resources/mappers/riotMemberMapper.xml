<?xml version="1.0" encoding="UTF-8"?>
<!-- mapper관련 DTD 추가 
   DTD : xml 문서(파일) 구조를 정의.
        데이터 교환의 표준형식임.
        데이터가 유효한 데이터인지를 판단 가능
-->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.lolcomm.mapper.RiotMemberMapper">
  
  <!-- 회원정보 검색 -->
  <select id="select_user" resultType="RiotMemberVO"> 
  select * from lolc_riotSearched_Member where id=#{id};
  </select>
  
  <!-- 유저 정보  입력 -->
  <insert id="insert_user" >
  	insert into lolc_riotSearched_Member(id,accountId,puuid,name,profileIconId,revisionDate,summonerLevel) 
  	values(#{id},#{accountId},#{puuid},#{name},#{profileIconId},#{revisionDate},#{summonerLevel});
  </insert>
  <insert id="insert_mastery" parameterType="java.util.List">
  	insert into lolc_riotSearched_Mastery(championId,championLevel,championPoints,
  	lastPlayTime,championPointsSinceLastLevel,championPointsUntilNextLevel,chestGranted,tokensEarned,summonerId) 
  	values
  	<foreach collection="list" item="item" separator=",">
  	(#{item.championId},#{item.championLevel},#{item.championPoints},
  	#{item.lastPlayTime},#{item.championPointsSinceLastLevel},#{item.championPointsUntilNextLevel},#{item.chestGranted},#{item.tokensEarned},#{item.summonerId}) 
  	</foreach>
  	ON DUPLICATE KEY UPDATE  
  	championLevel=values(championLevel),championPoints=values(championPoints),lastPlayTime=values(lastPlayTime),
  	championPointsSinceLastLevel=values(championPointsSinceLastLevel),championPointsUntilNextLevel=values(championPointsUntilNextLevel),
  	chestGranted=values(chestGranted),tokensEarned=values(tokensEarned) 
  </insert>
  <!-- 유저 리그 정보 입력 -->
  <insert id="insert_league" parameterType="java.util.List">
  	insert into lolc_riotSearched_League(leagueId,queueType,tier,rank,
  	summonerId,summonerName,leaguePoints,wins,losses,veteran,inactive,freshBlood,hotStreak) 
  	values 
  		<foreach collection="list" item="item" separator=",">
  		(#{item.leagueId},#{item.queueType},#{item.tier},#{item.rank},
  		#{item.summonerId},#{item.summonerName},#{item.leaguePoints},#{item.wins},#{item.losses},
  		#{item.veteran},#{item.inactive},#{item.freshBlood},#{item.hotStreak}) 
  		</foreach>
  	ON DUPLICATE KEY UPDATE 
  	leagueId=values(leagueId),queueType=values(queueType),tier=values(tier),rank=values(rank),
  	summonerId=values(summonerId),summonerName=values(summonerName),leaguePoints=values(leaguePoints),wins=values(wins),losses=values(losses),
  	veteran=values(veteran),inactive=values(inactive),freshBlood=values(freshBlood),hotStreak=values(hotStreak)
  </insert>
  <!-- 유저 정보 업데이트 -->
  <update id="update_user" >
  	update lolc_riotSearched_Member 
  	set name=#{name}, profileIconId=#{profileIconId},revisionDate=#{revisionDate},summonerLevel=#{summonerLevel}
  	where id=#{id};
  </update>
 
 <!-- 유저 레벨 랭킹 정보  -->
  <select id="select_LevelRank" resultType="levelRankingVO">
select member.name ,member.summonerLevel,concat(league.tier," ",league.rank) as tier,
league.leaguePoints,league.wins,league.losses,floor(league.wins/(league.wins+league.losses)*100) as rating
from lolc_riotSearched_Member as member
join lolc_riotSearched_League as league
on member.id=league.summonerId
where league.queueType ='RANKED_SOLO_5x5'
order by member.summonerLevel desc limit #{page},100;
  </select>
 
  </mapper>
  